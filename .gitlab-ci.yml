image: python:3.8-alpine

variables:
    DEBUG: "False"
    SECRET_KEY: "SECRET_KEY_REPLACE"
    DB_HOST: "harvester_db"
    DB_USER: "harvester_user"
    DB_PASSWORD: "harvester_passowrd"
    CELERY_BROKER_URL: "redis://harvester_redis:6379/0"
    DATAVERSE_URL: "https://test.dataverse.com"
    DATAVERSE_API_KEY: "DATAVERSE_API_KEY_REPLACE"
    LAYERS_PARENT_DATAVERSE: "layers"
    MAPS_PARENT_DATAVERSE: "maps"
    DOCUMENTS_PARENT_DATAVERSE: "documents"
    DASHBOARDS_PARENT_DATAVERSE: "dashboards"
    STUDIES_PARENT_DATAVERSE: "studies"

stages:
    - code checks
    - documentation
    - tests
    - sonarqube
    - build

Flake8:
    stage: code checks
    script:
        - pip install flake8
        - flake8 adapters/ core/ harvester/

PyLint:
    stage: code checks
    allow_failure: true
    before_script:
        - apk add make postgresql-libs gcc musl-dev postgresql-dev python3-dev git
        - pip install -r requirements.txt
    script:
        - pip install pylint pylint_django pylint_requests
        - pylint --rcfile ./.pylintrc adapters core harvester

Sphinx documentation development:
    stage: documentation
    before_script:
        - apk add make postgresql-libs gcc musl-dev postgresql-dev python3-dev git
        - pip install -r requirements.txt
        - pip install sphinx sphinx_rtd_theme sphinx-autodoc-typehints
    script:
        - cd docs/
        - make html
    artifacts:
        paths:
            - _build/html
        expire_in: 3 day
    only:
        - branches
    except:
        - master
    needs:
        - Flake8

Sphinx documentation:
    stage: documentation
    before_script:
        - apk add make postgresql-libs gcc musl-dev postgresql-dev python3-dev git
        - pip install -r requirements.txt
        - pip install sphinx sphinx_rtd_theme sphinx-autodoc-typehints
    script:
        - cd docs/
        - make html
    artifacts:
        paths:
            - _build/html
        expire_in: 30 day
    only:
        - master
    needs:
        - Flake8

test:
    stage: tests
    script:
        - apk add make postgresql-libs gcc musl-dev postgresql-dev python3-dev git
        - pip install -r requirements.txt
        - pip install factory-boy pytest pytest-cov pytest-pythonpath pytest-django
        - pytest -v --cov-report term-missing --cov-report xml:cov.xml --cov
    coverage: /^TOTAL.*\s+(\d+\%)$/
    artifacts:
        paths:
            - cov.xml
        expire_in: 1h
    needs:
        - Flake8

sonarqube:
    image: sonarsource/sonar-scanner-cli
    stage: sonarqube
    before_script: []
    script:
        - sonar-scanner -Dsonar.projectKey=Harvester -Dsonar.sources=. -Dsonar.host.url=https://sonarqube.whiteaster.com -Dsonar.login=e126c39bede52b892bfb1167951b54576a6690ca
    dependencies: 
        - test
    only:
        - master
    needs:
        - test

Build docker dev image:
    image: 
        name: gcr.io/kaniko-project/executor:debug
        entrypoint: [""]
    before_script:
        - echo "pass"
    stage: build
    script:
        - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"gitlab-ci-token\",\"password\":\"$CI_JOB_TOKEN\"}}}" > /kaniko/.docker/config.json
        - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG --destination $CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH --destination $CI_REGISTRY_IMAGE:development
    only:
        - development

Build docker master image:
    image: 
        name: gcr.io/kaniko-project/executor:debug
        entrypoint: [""]
    before_script:
        - echo "pass"
    stage: build
    script:
        - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"gitlab-ci-token\",\"password\":\"$CI_JOB_TOKEN\"}}}" > /kaniko/.docker/config.json
        - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG --destination $CI_REGISTRY_IMAGE:latest
    only:
        - master
